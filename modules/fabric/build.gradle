plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

fabricApi {
    configureDataGeneration() {
        client = true
    }
}

sourceSets {
    main {
        resources {
            srcDir "/src/main/generated"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    // modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}"

    modCompileOnly "com.terraformersmc:modmenu:${rootProject.modmenu_version}"
    modRuntimeOnly "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    common(project(path: ':modules:common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':modules:common', configuration: 'transformProductionFabric')
}

processResources {
    def props = [
            version              : project.version,
            mod_id               : rootProject.findProperty('mod_id'),
            mod_name             : rootProject.findProperty('mod_name'),
            mod_description      : rootProject.findProperty('mod_description'),
            mod_authors          : rootProject.findProperty('mod_authors'),
            mod_homepage         : rootProject.findProperty('mod_homepage'),
            mod_sources          : rootProject.findProperty('mod_sources'),
            mod_license          : rootProject.findProperty('mod_license'),

            minecraft_version    : rootProject.findProperty('minecraft_version'),
            fabric_loader_version        : rootProject.findProperty('fabric_loader_version'),
            modmenu_version      : rootProject.findProperty('modmenu_version'),
            cloth_config_version : rootProject.findProperty('cloth_config_version'),
    ]
    inputs.properties(props)

    filesMatching('fabric.mod.json') {
        expand(props)
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    // roadarchitect-{version}-{for_loader}+{mc_version}
    archiveFileName.set("roadarchitect-${project.version}-fabric+${rootProject.minecraft_version}.jar")
}

// ====================== Modrinth ====================
apply plugin: "com.modrinth.minotaur"
def modrinth_token = rootProject.ext.resolveModrinthToken()
if (!modrinth_token) throw new GradleException("Set MODRINTH_TOKEN env or in .env")

modrinth {
    token = modrinth_token
    projectId = "dLRvLyY3"
    versionNumber = "${project.version}-fabric"
    versionName   = "RoadArchitect v${project.version}+${rootProject.minecraft_version} [Fabric]"
    versionType   = "release"                 // или "beta"/"alpha"
    gameVersions  = [ rootProject.minecraft_version ]
    loaders       = [ "fabric" ]
    uploadFile    = remapJar                   // из Loom
    // changelog     = rootProject.file("CHANGELOG.md").exists() ? rootProject.file("CHANGELOG.md").text : ""
    dependencies { required.project "cloth-config" }
}
// ====================================================

// ====================== CurseForge ====================
apply plugin: "net.darkhax.curseforgegradle"

def curse_token = rootProject.ext.resolveCurseforgeToken()
if (!curse_token) throw new GradleException("Set CURSEFORGE_TOKEN env or in .env/gradle.properties")


def curse_project_id =
        (findProperty("curseforge_project_fabric")
                ?: System.getenv("CURSEFORGE_PROJECT_FABRIC")
                ?: findProperty("curseforge_project")
                ?: System.getenv("CURSEFORGE_PROJECT_ID")
                ?: "1326434")

tasks.register("curseforge", net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = curse_token

    disableVersionDetection()

    // основной артефакт из Loom
    dependsOn remapJar
    def mainFile = upload(curse_project_id as String, remapJar)

    // метаданные
    mainFile.displayName = "RoadArchitect v${project.version}+${rootProject.minecraft_version} [Fabric]"
    mainFile.releaseType = "release" // или "beta"/"alpha"
    mainFile.addModLoader("Fabric")
    mainFile.addGameVersion("${rootProject.minecraft_version}")
    mainFile.addJavaVersion("Java 21")
    mainFile.addEnvironment("Client", "Server")

    // changelog: сначала берём из модуля, затем — из корня
//    if (file("CHANGELOG.md").exists()) {
//        mainFile.changelog = file("CHANGELOG.md"); mainFile.changelogType = "markdown"
//    } else if (rootProject.file("CHANGELOG.md").exists()) {
//        mainFile.changelog = rootProject.file("CHANGELOG.md"); mainFile.changelogType = "markdown"
//    }

    // зависимости (SLUG'и проектов на CurseForge)
    mainFile.addRequirement("cloth-config")
    //mainFile.addRequirement("fabric-api")
    // mainFile.addOptional("some-optional-lib")
}