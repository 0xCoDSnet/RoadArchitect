plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    // modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"


    common(project(path: ':modules:common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':modules:common', configuration: 'transformProductionNeoForge')
}

processResources {
    def props = [
            version              : project.version,
            mod_id               : rootProject.findProperty('mod_id'),
            mod_name             : rootProject.findProperty('mod_name'),
            mod_description      : rootProject.findProperty('mod_description'),
            mod_authors          : rootProject.findProperty('mod_authors'),
            mod_homepage         : rootProject.findProperty('mod_homepage'),
            mod_sources          : rootProject.findProperty('mod_sources'),
            mod_license          : rootProject.findProperty('mod_license'),

            minecraft_version    : rootProject.findProperty('minecraft_version'),
            owo_version          : rootProject.findProperty('owo_version'),
    ]
    inputs.properties(props)

    filesMatching('META-INF/neoforge.mods.toml') {
        expand(props)
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
