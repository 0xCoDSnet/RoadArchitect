plugins {
    id "pl.allegro.tech.build.axion-release" version "1.19.0"
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}

//scmVersion {
//    tag {
//        // префикс берётся из ваших свойств
//        prefix.set("${project.minecraft_version}_${project.mod_version}")
//    }
//
//    // задаём поведение «сколько и как инкрементить»
//    versionIncrementer("incrementPatch")
//
//    // настраиваем «метку» следующей версии
//    nextVersion {
//        // разделитель между номером версии и суффиксом
//        separator.set("-")
//        // суффикс, обозначающий «начало работы над следующей версией»
//        suffix.set("SNAPSHOT")
//
//        // свой сериализатор: берём bump-нутый патч и прямо формируем строку с вашим префиксом
//        serializer({ cfg, versionObj ->
//            // versionObj – это Version API
//            def bumped = versionObj.incrementPatchVersion()
//            // собираем: "<mc>_<mod>-<MAJOR.MINOR.(PATCH+1)>"
//            return "${project.minecraft_version}_${project.mod_version}${cfg.separator}${bumped.asString()}"
//        })
//    }
//}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // Loom автоматически добавляет репозитории для Minecraft и библиотек,
    // а эти нужны только для сторонних модов.
    // См. https://docs.gradle.org/current/userguide/declaring_repositories.html
    maven {
        url = uri("https://maven.wispforest.io")
    }
    maven {
        url = uri("https://maven.terraformersmc.com/")
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        roadarchitect {
            sourceSet(sourceSets.main)
            sourceSet(sourceSets.client)
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

dependencies {
    // Чтобы менять версии, правьте gradle.properties
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API (рекомендуется)
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
    include "io.wispforest:owo-sentinel:${project.owo_version}"

    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${project.junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.junit_version}"
}

processResources {
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property("archivesName", project.base.archivesName)

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from(components.java)
        }
    }

    repositories {

    }
}

